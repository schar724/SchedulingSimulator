import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;

import javax.swing.AbstractButton;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author scott
 */
public class Interface extends javax.swing.JFrame {

    Animator animator = null;
    boolean allProcessesDone = false;

    /**
     * Creates new form ScheudlingAlgorithmsUI
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Algorithms = new javax.swing.JPanel();
        fcfs_rb = new javax.swing.JRadioButton();
        sjf_rb = new javax.swing.JRadioButton();
        srt_rb = new javax.swing.JRadioButton();
        rr_rb = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        labelCurrentProcess = new javax.swing.JLabel();
        avgWatingTime = new javax.swing.JLabel();
        avgTurnaroundTime = new javax.swing.JLabel();
        Throughput = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelCurrentTime = new javax.swing.JLabel();
        currentProc = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        runBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        cancelBtn = new javax.swing.JButton();
        ganttBackground = new javax.swing.JPanel();
        quantum = new javax.swing.JComboBox<>();
        fastForwardBtn = new javax.swing.JButton();
        changeData = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        processData = new javax.swing.JTable();
        resetBtn = new javax.swing.JButton();
        randomBtn = new javax.swing.JButton();
        singleStepBtn = new javax.swing.JButton();
        currentTime = 0;
        

        buttonGroup1.add(fcfs_rb);
        buttonGroup1.add(sjf_rb);
        buttonGroup1.add(srt_rb);
        buttonGroup1.add(rr_rb);
        buttonGroup1.setSelected(fcfs_rb.getModel(), true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fcfs_rb.setText("First Come First Served");
        sjf_rb.setText("Shortest Job First");
        srt_rb.setText("Shortest Remaining Time");
        rr_rb.setText("Round Robin");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelCurrentProcess.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelCurrentProcess.setText("Current Process:");

        avgWatingTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        avgWatingTime.setText("Average Waiting Time: ");

        avgTurnaroundTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        avgTurnaroundTime.setText("Average Turnaround Time: ");

        Throughput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        Throughput.setText("Throughput: ");

        labelCurrentTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        labelCurrentTime.setText("Current Time: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator2)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(labelCurrentProcess)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(currentProc))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                false)
                                                        .addComponent(Throughput)
                                                        .addComponent(avgTurnaroundTime)
                                                        .addComponent(labelCurrentTime)
                                                        .addComponent(avgWatingTime,
                                                                javax.swing.GroupLayout.Alignment.TRAILING,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap()));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(labelCurrentProcess)
                                        .addComponent(jLabel6)
                                        .addComponent(currentProc))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelCurrentTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145,
                                        Short.MAX_VALUE)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(avgWatingTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(avgTurnaroundTime)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Throughput)
                                .addContainerGap()));

        runBtn.setText("Run");
        runBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    runBtnMouseClicked(evt);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        });

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { "P1", null, null, null, null, null, null, null },
                        { "P2", null, null, null, null, null, null, null },
                        { "P3", null, null, null, null, null, null, null },
                        { "P4", null, null, null, null, null, null, null },
                        { "P5", null, null, null, null, null, null, null },
                        { "P6", null, null, null, null, null, null, null },
                        { "P7", null, null, null, null, null, null, null },
                        { "P8", null, null, null, null, null, null, null }
                },
                new String[] {
                        "Process", "Arrive Time", "CPU Burst", "Start Time", "Wating Time", "Remaining Time",
                        "Finish Time", "Turn Around"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane1.setViewportView(resultsTable);

        jLabel1.setText("Quantum:");

        cancelBtn.setText("Cancel");
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });

        singleStepBtn.setText("Single Step");
        singleStepBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                singleStepBtnMouseClicked();
            }

        });

        ganttBackground.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ganttBackground.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout ganttBackgroundLayout = new javax.swing.GroupLayout(ganttBackground);
        ganttBackground.setLayout(ganttBackgroundLayout);
        ganttBackgroundLayout.setHorizontalGroup(
                ganttBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 624, Short.MAX_VALUE));
        ganttBackgroundLayout.setVerticalGroup(
                ganttBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE));

        quantum.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        fastForwardBtn.setText("Fast Forward");
        fastForwardBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fastForwardBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout AlgorithmsLayout = new javax.swing.GroupLayout(Algorithms);
        Algorithms.setLayout(AlgorithmsLayout);
        AlgorithmsLayout.setHorizontalGroup(
                AlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator1)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AlgorithmsLayout.createSequentialGroup()
                                .addGroup(AlgorithmsLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AlgorithmsLayout
                                                .createSequentialGroup()
                                                .addComponent(fcfs_rb)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sjf_rb)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(srt_rb)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rr_rb)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(quantum, javax.swing.GroupLayout.PREFERRED_SIZE, 45,
                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        111, Short.MAX_VALUE)
                                                .addComponent(singleStepBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fastForwardBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(runBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cancelBtn)
                                                .addGap(1, 1, 1))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AlgorithmsLayout
                                                .createSequentialGroup()
                                                .addContainerGap()
                                                .addGroup(AlgorithmsLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jScrollPane1)
                                                        .addGroup(AlgorithmsLayout.createSequentialGroup()
                                                                .addComponent(ganttBackground,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jPanel1,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)))))
                                .addContainerGap()));
        AlgorithmsLayout.setVerticalGroup(
                AlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(AlgorithmsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(
                                        AlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(AlgorithmsLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(fcfs_rb)
                                                        .addComponent(sjf_rb)
                                                        .addComponent(srt_rb)
                                                        .addComponent(rr_rb)
                                                        .addComponent(jLabel1)
                                                        .addComponent(quantum, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(AlgorithmsLayout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(singleStepBtn)
                                                        .addComponent(runBtn)
                                                        .addComponent(cancelBtn)
                                                        .addComponent(fastForwardBtn)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(
                                        AlgorithmsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(ganttBackground, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap()));

        jTabbedPane1.addTab("Algorithms", Algorithms);

        processData.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { "P1", "0", "0" },
                        { "P2", "0", "0" },
                        { "P3", "0", "0" },
                        { "P4", "0", "0" },
                        { "P5", "0", "0" },
                        { "P6", "0", "0" },
                        { "P7", "0", "0" },
                        { "P8", "0", "0" }
                },
                new String[] {
                        "Process", "Arrival Time", "Burst Time"
                }) {
            boolean[] canEdit = new boolean[] {
                    false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
        jScrollPane2.setViewportView(processData);

        resetBtn.setText("Reset");
        resetBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetBtnMouseClicked(evt);
            }
        });

        randomBtn.setText("Random");
        randomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                randomBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout changeDataLayout = new javax.swing.GroupLayout(changeData);
        changeData.setLayout(changeDataLayout);
        changeDataLayout.setHorizontalGroup(
                changeDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, changeDataLayout.createSequentialGroup()
                                .addContainerGap(305, Short.MAX_VALUE)
                                .addGroup(changeDataLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(changeDataLayout.createSequentialGroup()
                                                .addComponent(randomBtn)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(resetBtn))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(251, 251, 251)));
        changeDataLayout.setVerticalGroup(
                changeDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(changeDataLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 196,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(
                                        changeDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(resetBtn)
                                                .addComponent(randomBtn))
                                .addContainerGap(323, Short.MAX_VALUE)));

        jTabbedPane1.addTab("Change Data", changeData);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTabbedPane1)
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jTabbedPane1)
                                .addContainerGap()));

        pack();
    }// </editor-fold>

    private void runBtnMouseClicked(java.awt.event.MouseEvent evt) throws InterruptedException {
        clearTable();
        currentTime = 0;
        for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                selectedAlgorithm = button.getText();
            }
        }

        quantumNum = Integer.parseInt(quantum.getSelectedItem().toString());

        ArrayList<Process> processes = buildProcessList();

        setTableData(processes);

        animator = new Animator(singleStepBtn);
        animator.run();

    }

private ArrayList<Process> buildProcessList() {
        Process p1 = new Process(1, Integer.parseInt(processData.getValueAt(0, 1).toString()),
                Integer.parseInt(processData.getValueAt(0, 2).toString()));
        Process p2 = new Process(2, Integer.parseInt(processData.getValueAt(1, 1).toString()),
                Integer.parseInt(processData.getValueAt(1, 2).toString()));
        Process p3 = new Process(3, Integer.parseInt(processData.getValueAt(2, 1).toString()),
                Integer.parseInt(processData.getValueAt(2, 2).toString()));
        Process p4 = new Process(4, Integer.parseInt(processData.getValueAt(3, 1).toString()),
                Integer.parseInt(processData.getValueAt(3, 2).toString()));
        Process p5 = new Process(5, Integer.parseInt(processData.getValueAt(4, 1).toString()),
                Integer.parseInt(processData.getValueAt(4, 2).toString()));
        Process p6 = new Process(6, Integer.parseInt(processData.getValueAt(5, 1).toString()),
                Integer.parseInt(processData.getValueAt(5, 2).toString()));
        Process p7 = new Process(7, Integer.parseInt(processData.getValueAt(6, 1).toString()),
                Integer.parseInt(processData.getValueAt(6, 2).toString()));
        Process p8 = new Process(8, Integer.parseInt(processData.getValueAt(7, 1).toString()),
                Integer.parseInt(processData.getValueAt(7, 2).toString()));

        ArrayList<Process> processes = new ArrayList<Process>();

        processes.add(p1);
        processes.add(p2);
        processes.add(p3);
        processes.add(p4);
        processes.add(p5);
        processes.add(p6);
        processes.add(p7);
        processes.add(p8);

        CPU.setQuantum(quantumNum);
        CPU.setprocessList(processes);
        CPU.setAlgorithm(selectedAlgorithm);
        return processes;
}

    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        model.setRowCount(0);
    }

    private void singleStepBtnMouseClicked() {// GEN-FIRST:event_buttonNextStepActionPerformed
        // radioButtonGroupDisable();
        // if (!algorithmSet) {
        
        // algorithmSet = true;
        // quantum = (int) spinnerQuantum.getValue();

        // }

        // if (!quantumSet) {
        // quantum = (int) spinnerQuantum.getValue();
        
        // System.out.println(quantum);
        // quantumSet = true;
        // }

        ArrayList<Process> processes = buildProcessList();

        CPU.setAlgorithm(selectedAlgorithm);
        CPU.setQuantum(quantumNum);

       

        setTableData(processes);

        CurrentProcess currentProcess = CPU.nextMove(currentTime);

        addCell(currentProcess.getCurrentProcess().getprocessNum());
        clearTableData();
        setTableData(currentProcess.getTableData());
        updateLabels(currentProcess.getCurrentProcess());
        currentTime++;

    }

    private void addCell(int jobNo) {
        Cell cell = new Cell(jobNo);

        ganttBackground.add(cell);
        ganttBackground.revalidate();
    }

    private void updateLabels(Process proc) {

        if (proc.getprocessNum() < 11 && proc.getprocessNum() > 0) {
            currentProc.setText("job " + proc.getprocessNum());
        } else if (proc.getprocessNum() == 11) {
            currentProc.setText("waiting");
        } else if (proc.getprocessNum() == 0) {
            currentProc.setText("finished");
            // calculateAverages();
            allProcessesDone = true;
            if (animator != null) {
                animator.setAllprocesssDone(true);
            }
            singleStepBtn.setEnabled(false);
            cancelBtn.setEnabled(true);
        }
        labelCurrentTime.setText("Current Time: " + currentTime + "");
    }

    private void clearTableData() {
        DefaultTableModel tableModel = (DefaultTableModel) resultsTable.getModel();
        tableModel.setRowCount(0);
    }

    private void setTableData(ArrayList<Process> processList) {

        DefaultTableModel tableModel = (DefaultTableModel) resultsTable.getModel();
        Object rowData[] = new Object[8];

        processList.forEach(proc -> {
            rowData[0] = proc.getprocessNum();
            rowData[1] = proc.getArrivalTime();
            rowData[2] = proc.getBurstTime();
            rowData[3] = proc.getStartTime();
            rowData[4] = proc.getWaitTime();
            rowData[5] = proc.getRemainingTime();
            rowData[6] = proc.gettimeFinished();
            rowData[7] = proc.getTurnAroundTime();

            tableModel.addRow(rowData);
        });
    }

    public void initGanttChart() {
        // buttonGroupAlgorithm.setSelected(radioButtonFCFS.getModel(), true);
        // ganttBackground.setLayout(new FlowLayout(FlowLayout.LEFT, 2, 2));
        // ganttBackground.setPreferredSize(new Dimension(960, 347));
        // ganttBackground.setMaximumSize(new Dimension(960, 347));
    }

    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {
        clearTable();
        if (animator != null) {
            animator.setAllprocesssDone(true);
        }

    }

    private void fastForwardBtnMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void randomBtnMouseClicked(java.awt.event.MouseEvent evt) {

        Random rand = new Random();

        for (int i = 0; i < processData.getRowCount(); i++) {
            int k = rand.nextInt(50);
            k += 1;
            for (int j = 1; j < processData.getColumnCount(); j++) {
                int n = rand.nextInt(50);
                n += 1;
                processData.setValueAt(k, i, j++);
                processData.setValueAt(n, i, j);
            }
        }
    }

    private void resetBtnMouseClicked(java.awt.event.MouseEvent evt) {
        for (int i = 0; i < processData.getRowCount(); i++) {
            for (int j = 1; j < processData.getColumnCount(); j++) {
                processData.setValueAt("0", i, j++);
                processData.setValueAt("10", i, j);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JPanel Algorithms;
    private javax.swing.JLabel Throughput;
    private javax.swing.JLabel avgTurnaroundTime;
    private javax.swing.JLabel avgWatingTime;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel changeData;
    private javax.swing.JLabel currentProc;
    private javax.swing.JLabel labelCurrentTime;
    private javax.swing.JButton fastForwardBtn;
    private javax.swing.JRadioButton fcfs_rb;
    private javax.swing.JPanel ganttBackground;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelCurrentProcess;
    private javax.swing.JTable processData;
    private javax.swing.JComboBox<String> quantum;
    private javax.swing.JButton randomBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTable resultsTable;
    private javax.swing.JRadioButton rr_rb;
    private javax.swing.JButton runBtn;
    private javax.swing.JRadioButton sjf_rb;
    private javax.swing.JRadioButton srt_rb;
    private String selectedAlgorithm;
    private int quantumNum;
    private int currentTime;
    private javax.swing.JButton singleStepBtn;
    // End of variables declaration

}